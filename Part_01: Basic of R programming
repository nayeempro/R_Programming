
# 'R' is a programming language for statistical computing and graphics.
# 'R' was initially written in 'C' and 'Fortran'
# You need to download and install 'R' [Download the latest version]
# For better experience do your coding in the popular IDE: RStudio
#Download Link: https://posit.co/download/rstudio-desktop/
# R makes use of the # sign to add comments, so that you and others can understand what the
#R code is about
# Comments are not run as R code, so they will not influence your result.
#You can write and execute R commands from Editor (control+enter) or straight in the console.
# This is a good way to experiment with R code
#Arithmetic with R
#In its most basic form, R can be used as a simple calculator. Consider the following arithmetic
#operators:
  #
  # Addition: +
  # Subtraction: -
  # Multiplication: *
  # Division: /
  # Exponentiation: ^
  # Modulo: %%
  # The last two might need some explaining:
  #
  # The ^ operator raises the number to its left to the power of the number to its right: for example
 
 3^2 
  
# The modulo returns the remainder of the division of the number to the left by the number on its
#right, for example 5 modulo 3 or 5 %% 3 is 2.
  5%%3
### After installing and setting up the environment, first, you need to learn about
# different available components available in R
# A multiplication
3 * 5 #15
# A division
(5 + 5) / 2 #5
# Exponentiation
2^5 #32
# Modulo
28%%6 #4
#Variable Assignment: A basic concept in (statistical) programming is called a variable.
#A variable allows you to store a value (e.g. 4) or an object (e.g. a function description) in R.
#"You can then later use this variable's name to easily access the value or the object that is
#stored within this variable."
#You can assign a value 4 to a variable my_var with the command
my_var <- 4 #You can use the '=' sign as well, but better using this one
my_var
# Assign a value to the variables my_apples and my_oranges
my_apples <- 5
my_oranges <- 6
# Add these two variables together
my_apples + my_oranges
# Create the variable my_fruit
my_fruit <- my_apples + my_oranges
my_fruit
### Basic Data Types in R
# R works with numerous data types. Some of the most basic types to get started are:
# Decimal values like 4.5 are called numeric (often, double/dbl).
# Whole numbers like 4 are called integers. Integers are also numerics.
# Boolean values (TRUE or FALSE) are called logical.
# Text (or string) values are called characters (string).
# You cannot add numeric to the characters. You would get an error due to mismatch in data
types.
# To check the variable types/class:
class()
my_numeric <- 42
my_character <- "universe"
my_logical <- FALSE
my_int <- 4.5
# Check class of my_numeric
class(my_numeric)
# Check class of my_character
class(my_character)
# Check class of my_logical
class(my_logical)

# Check class of my_int
class(my_int)





############# R Components: Vectors, Matrices, Factors, Data Frames, Lists
###################

#======== Vectors: Vectors are one-dimension arrays that can hold numeric data, character
#data, or logical data.
#In other words, a vector is a simple tool to store data.
#In R, you create a vector with the combine function c().
#You place the vector elements separated by a comma between the parentheses. For example:
numeric_vector <- c(1, 2, 3)
character_vector <- c("a", "b", "c") #Use Double Quotation for character variable
boolean_vector <- c(TRUE, FALSE, TRUE)
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)
# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)
# Naming a vector
#As a data analyst, it is important to have a clear view on the data that you are using.
#Understanding what each element refers to is therefore essential.
# You can give a name to the elements of a vector with the names() function. Have a look at this
#example:
  # Assign days as names of poker_vector
  names(poker_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
# Assign days as names of roulette_vector
names(roulette_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
# We can choose another approach for not repeating
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)
# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)
# The variable days_vector
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
# Assign the names of the day to roulette_vector and poker_vector
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector
#Calculating total winnings: how much you won/lost on each day
total_daily <- poker_vector + roulette_vector
total_daily
# Total winnings with poker
total_poker <- sum(poker_vector)
total_poker
# Total winnings with roulette
total_roulette <- sum(roulette_vector)
total_roulette
# Total winnings overall
total_week <- total_poker + total_roulette
# Print out total_week
total_week
#Comparing total winnings
# Check if you realized higher total gains in poker than in roulette
total_poker > total_roulette #You get the result  as "TRUE"

#Vector Selection:
poker_wednesday <- poker_vector[3]
poker_wednesday
#Assign the poker results of Tuesday, Wednesday and Thursday to the variable poker_midweek
poker_midweek <- poker_vector [c(2, 3, 4)] #alternatively, poker_vector [c(2:4)]
poker_midweek
#We can directly use the names of the days if you remember the spelling
# Select poker results for Monday, Tuesday and Wednesday
poker_start <- poker_vector [c("Monday", "Tuesday", "Wednesday")]
poker_start
# Calculate the average of the elements in poker_start
mean(poker_start)
#The (logical) comparison operators known to R are:
# < for less than
# > for greater than
# <= for less than or equal to
# >= for greater than or equal to
# == for equal to each other
# != not equal to each other
#As seen in the previous chapter, stating 6 > 5 returns TRUE.
#The nice thing about R is that you can use these comparison operators also on vectors. For
#example:
  poker_start[c(4, 5, 6)] > 5
#This command tests for every element of the vector if the condition stated by the comparison
#operator is TRUE or FALSE.
# Which days did you make money on poker?
selection_vector <- poker_vector > 0
# Print out selection_vector
selection_vector
# Select from poker_vector these days
poker_winning_days <- poker_vector [selection_vector]
poker_winning_days



#===================MATRIX==========================


### Matrix: In R, a matrix is a collection of elements of the same data type
# (numeric, character, or logical) arranged into a fixed number of rows and columns.
# Since you are only working with rows and columns, a matrix is called two-dimensional.
# You can construct a matrix in R with the matrix() function. Consider the following example:
matrix(1:9, byrow = TRUE, nrow = 3) #bycolumn is default
# In the matrix() function:
# The first argument is the collection of elements that R will arrange into the rows and columns
#of the matrix.
# Here, we use 1:9 which is a shortcut for c(1, 2, 3, 4, 5, 6, 7, 8, 9).
#The argument byrow indicates that the matrix is filled by the rows. If we want the matrix to be
#filled by the columns, we just place byrow = FALSE.
#The third argument nrow indicates that the matrix should have three rows.
# Box office Star Wars (in millions!)
new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.8)
# Create box_office
box_office <- c(new_hope, empire_strikes, return_jedi)
box_office
class(box_office)
typeof(box_office)
# Construct star_wars_matrix
star_wars_matrix <- matrix(box_office, byrow = TRUE, nrow = 3)
star_wars_matrix
# Vectors region and titles, used for naming
region <- c("US", "non-US")
titles <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")
# Name the columns with region
colnames(star_wars_matrix) <- region
# Name the rows with titles
rownames(star_wars_matrix) <- titles
# Print out star_wars_matrix
star_wars_matrix
# Construct star_wars_matrix
box_office <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8)
region <- c("US", "non-US")
titles <- c("A New Hope",
            "The Empire Strikes Back",
            "Return of the Jedi")
star_wars_matrix <- matrix(box_office,
                           nrow = 3, byrow = TRUE,
                           dimnames = list(titles, region))
# Calculate worldwide box office figures
worldwide_vector <- rowSums (star_wars_matrix)
worldwide_vector

# Bind the new variable worldwide_vector as a column to star_wars_matrix
all_wars_matrix <- cbind(star_wars_matrix, worldwide_vector)
all_wars_matrix
new_row <- all_wars_matrix[3,]
new_row
all_wars_matrix <- rbind(all_wars_matrix, new_row)
all_wars_matrix
?rbind

# Similarly, you can combine the rows of two matrices using the 'rbind()' syntax. In that case, the
#dimension
# of the two matrices should match
# Selection of matrix elements
#Similar to vectors, you can use the square brackets [ ] to select one or multiple elements from
#a matrix. Whereas vectors have one dimension, matrices have two dimensions.
#You should therefore use a comma to separate the rows you want to select from the columns.
#For example:
  #my_matrix[1,2] selects the element at the first row and second column.
  #my_matrix[1:3,2:4] results in a matrix with the data on the rows 1, 2, 3 and columns 2, 3, 4.
  #If you want to select all elements of a row or a column, no number is needed before or after the
  #comma, respectively:
  #my_matrix[,1] selects all elements of the first column.
  #my_matrix[1,] selects all elements of the first row.
  # Select the non-US revenue for all movies
  non_us_all <- all_wars_matrix [,2]
# Average non-US revenue
mean(non_us_all)
# Select the non-US revenue for first two movies
non_us_some <- all_wars_matrix [1:2, 2]
# Average non-US revenue for first two movies
mean(non_us_some)
# Estimate the visitors
visitors <- all_wars_matrix / 5 #Element wise division
# Construct ticket_prices_matrix
ticket <- c(5.0, 4.0, 6.0, 5.5, 7.0, 7.0)
region <- c("US", "non-US")
titles <- c("A New Hope",
            "The Empire Strikes Back",
            "Return of the Jedi")
ticket_prices_matrix <- matrix(ticket,
                               nrow = 3, byrow = TRUE,
                               dimnames = list(titles, region))
ticket_prices_matrix
star_wars_matrix
# Estimated number of visitors
visitors <- star_wars_matrix / ticket_prices_matrix
visitors
# US visitors
us_visitors <- visitors[,1]
# Average number of US visitors
mean(us_visitors)



#=============FACTOR======================


#### Factors
# What's a factor and why would you use it?
#The term factor refers to a statistical data type used to store categorical variables.
#The difference between a categorical variable and a continuous variable is that a categorical
#variable can belong to a limited number of categories.
#A continuous variable, on the other hand, can correspond to an infinite number of values.
#It is important that R knows whether it is dealing with a continuous or a categorical variable,
# as the statistical models you will develop in the future treat both types differently.
#A good example of a categorical variable is Gender
#In many circumstances you can limit the Gender categories to "Male" or "Female"
#To create factors in R, you make use of the function factor().
#First thing that you have to do is create a vector that contains all the observations that belong
#to a limited number of categories.
#For example, sex_vector contains the sex of 5 different individuals:
# Sex vector
sex_vector <- c("Male", "Female", "Female", "Male", "Male")
# Convert sex_vector to a factor
factor_sex_vector <-factor (sex_vector)
# Print out factor_sex_vector
factor_sex_vector # Notice that R prints out the factor levels below the actual values.
#It is clear that there are two categories, or in R-terms 'factor levels', at work here: "Male" and "Female".
### There are two types of categorical variables: a nominal categorical variable and an ordinal
#categorical variable.
#A nominal variable is a categorical variable without an implied order.
#This means that it is impossible to say that 'one is worth more than the other'.
#For example, think of the categorical variable animals_vector with the categories "Elephant",
#"Giraffe", "Donkey" and "Horse".
#Here, it is impossible to say that one stands above or below the other.
#In contrast, ordinal variables do have a natural ordering.
#Consider for example the categorical variable temperature_vector with the categories: "Low",
#"Medium" and "High".
#Here it is obvious that "Medium" stands above "Low", and "High" stands above "Medium".
# Animals
animals_vector <- c("Elephant", "Giraffe", "Donkey", "Horse","Elephant", "Giraffe", "Donkey", "Horse","Elephant", "Giraffe", "Donkey", "Horse")
factor_animals_vector <- factor(animals_vector)
factor_animals_vector
# Temperature
temperature_vector <- c("High", "Low", "High","Low", "Medium")
factor_temperature_vector <- factor(temperature_vector, order = TRUE, levels = c("Low",
                                                                                 "Medium", "High"))
factor_temperature_vector
#When you first get a dataset, you will often notice that it contains factors with specific factor
# levels. However, sometimes you will want to change the names of these levels for clarity or
# other reasons.
#R allows you to do this with the function levels():
# Code to build factor_survey_vector
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)
# Check the levels
levels(factor_survey_vector)
# Specify the levels of factor_survey_vector
levels(factor_survey_vector) <- c("Female", "Male")
factor_survey_vector


### Summarizing a factor
# Generate summary for survey_vector
summary(survey_vector) #Nothing Meaningful here without the levels
# Generate summary for factor_survey_vector
summary(factor_survey_vector)
#You might wonder what happens when you try to compare elements of a factor.
#In factor_survey_vector you have a factor with two levels: "Male" and "Female".
#But how does R value these relative to each other?
# Build factor_survey_vector with clean levels
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)
levels(factor_survey_vector) <- c("Female", "Male")
factor_survey_vector
# Male
Male <- factor_survey_vector[1]
# Female
Female <- factor_survey_vector[2]
Female_1 <- factor_survey_vector[3]

# Battle of the sexes: Male 'larger' than female?
Male > Female #‘>’ not meaningful for factors
#Ordered factors
# Create speed_vector for some data analyst's working speed
speed_vector <- c("medium", "slow", "slow", "medium", "fast")
# Convert speed_vector to ordered factor vector
factor_speed_vector <- factor(speed_vector,
                              ordered = TRUE,
                              levels = c("slow", "medium", "fast"))
# Print factor_speed_vector
factor_speed_vector
summary(factor_speed_vector)
# Factor value for second data analyst
da2 <- factor_speed_vector[2]
# Factor value for fifth data analyst
da5 <- factor_speed_vector[5]
# Is data analyst 2 faster than data analyst 5?
da2
da5
da2 > da5 #FALSE; You get a comparison; logical output



#================= DATA FRAME ===============================


### Data Frame
# You may remember from the matrices that all the elements that you put in a matrix should be
# of the same type.
# Back then, your dataset on Star Wars only contained numeric elements.
# But, when doing a market research survey, however, you often have questions such as:
# 'Are you married?' or 'yes/no' questions (logical)
# 'How old are you?' (numeric)
# 'What is your opinion on this product?' or other 'open-ended' questions (character)
# The output, namely the respondents' answers to the questions formulated above, is a dataset
# of different data types.
# You will often find yourself working with datasets that contain different data types instead of
# only one.



### A data frame has the variables of a dataset as columns and the observations as rows.
mtcars #R's built-in dataset/dataframe
#some other built-in dataset: airquality, iris, Airpassengers
install.packages("gapminder") #To Install a Package/Library
library(gapminder) #To load the package
gapminder #another built in dataset preserved in 'gapminder' package
#the function head() enables you to show the first observations of a data frame.
head(gapminder) #showing the first 6 records
head(gapminder, 15) #any specified numbers
tail(gapminder)
# Investigate the structure of gapminder
str(gapminder)
#Another way,
glimpse (gapminder) #For that you need to call 'tidyverse' package
###Creating a data frame
# Definition of vectors
name <- c("Mercury", "Venus", "Earth",
          "Mars", "Jupiter", "Saturn",
          "Uranus", "Neptune")
type <- c("Terrestrial planet",
          "Terrestrial planet",
          "Terrestrial planet",
          "Terrestrial planet", "Gas giant",
          "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532,
              11.209, 9.449, 4.007, 3.883) #The planet's diameter relative to the diameter of the
Earth.
rotation <- c(58.64, -243.02, 1, 1.03,
              0.41, 0.43, -0.72, 0.67) #The planet's rotation across the sun relative to that of the
Earth.
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
# Create a data frame from the vectors
planets_df <- data.frame(name, type, diameter, rotation, rings)
planets_df
# Check the structure of planets_df
str(planets_df)




### Selection of data frame elements
# Print out diameter of Mercury (row 1, column 3)
planets_df[1,3]
# Print out data for Mars (entire fourth row)
planets_df[4,]
#Instead of using numerics to select elements of a data frame, you can also use the variable
names to select columns of a data frame.
# Select first 5 values of diameter column
planets_df [1:5, "diameter"]
#Only planets with rings
# Select the rings variable from planets_df
rings_vector <- planets_df$rings
planets_df[rings_vector, ]
# Select planets with diameter < 1
subset(planets_df, subset = diameter <1) #using 'subset' function; much efficient




### Sorting your data frame
# Use order() to create positions
positions <- order(planets_df$diameter)
positions
# Use positions to sort planets_df
planets_df[positions,]










######### =============================== List ==========================


#A list in R is similar to your to-do list at work or school: the different items
# on that list most likely differ in length, characteristic, and type of activity that has to be done.
#A list in R allows you to gather a variety of objects under one name (that is, the name of the
list) in an ordered way.
#These objects can be matrices, vectors, data frames, even other lists, etc.
#It is not even required that these objects are related to each other in any way.
#You could say that a list is some kind super data type:
#you can store practically any piece of information in it!
#Let us create our first list! To construct a list you use the function list():
# Vector with numerics from 1 up to 10
my_vector <- 1:10
my_vector
# Matrix with numerics from 1 up to 9
my_matrix <- matrix(1:9, ncol = 3)
my_matrix
# First 10 elements of the built-in data frame mtcars
my_df <- mtcars[1:10,]
my_df
# Construct list with these different elements:
my_list <- list(my_vector, my_matrix, my_df)
my_list
#Creating a named list
my_list <- list(vec = my_vector, mat = my_matrix, df = my_df)
my_list
### Selecting elements from a list
#One way to select a component is using the numbered position of that component.
my_list [[1]]
#or,
my_list[["vec"]]
#or,
my_list$vec
## Print the second element of the vector representing the vec
my_list[["vec"]][2]
#Creating a new list for a movie
scores <- c(4.6, 5, 4.8, 5, 4.2)
comments <- c("I would watch it again", "Amazing!", "I liked it", "One of the best movies",
              "Fascinating plot")
# Save the average of the scores vector as avg_review
avg_review = mean(scores)
avg_review
# Combine scores and comments into the reviews_df data frame
reviews_df <- data.frame(scores, comments)
reviews_df
# Create and print out a list, called departed_list
departed_list <- list (reviews_df, avg_review)
departed_list

departed_list[[1]] #gives the column 1 in index list of 1

departed_list[[1]][1,2]

